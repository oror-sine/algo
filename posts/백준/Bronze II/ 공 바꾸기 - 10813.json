{"operationName": "WritePost", "query": "mutation WritePost(\n    $title: String\n    $body: String\n    $tags: [String]\n    $is_markdown: Boolean\n    $is_temp: Boolean\n    $is_private: Boolean\n    $url_slug: String\n    $thumbnail: String\n    $meta: JSON\n    $series_id: ID\n    $token: String\n  ) {\n    writePost(\n      title: $title\n      body: $body\n      tags: $tags\n      is_markdown: $is_markdown\n      is_temp: $is_temp\n      is_private: $is_private\n      url_slug: $url_slug\n      thumbnail: $thumbnail\n      meta: $meta\n      series_id: $series_id\n      token: $token\n    ) {\n      id\n      user {\n        id\n        username\n      }\n      url_slug\n    }\n  }\n", "variables": {"body": "[\ubb38\uc81c \ub9c1\ud06c](https://www.acmicpc.net/problem/10813)\n\n### .rs\n\nTime: 0 ms, Memory: 13208 KB \n\n```rs\nuse std::io::stdin;\n\nfn main() {\n    let mut buf = String::new();\n    stdin().read_line(&mut buf).unwrap();\n\n    let mut nm = buf\n        .split_ascii_whitespace()\n        .map(|x| x.parse::<u8>().unwrap());\n\n    let n = nm.next().unwrap();\n    let _ = nm.next().unwrap();\n\n    let mut balls: Vec<_> = (0..=n).map(|x| x.to_string()).collect();\n\n    for line in stdin().lines() {\n        let buf = line.unwrap();\n        let mut buf = buf\n            .split_ascii_whitespace()\n            .map(|x| x.parse::<usize>().unwrap());\n        let i = buf.next().unwrap();\n        let j = buf.next().unwrap();\n\n        balls.swap(i, j);\n    }\n\n    print!(\"{}\", balls[1..].join(\" \"));\n}\n\n```\n\n", "is_markdown": true, "is_private": true, "is_temp": false, "meta": {"short_description": "[\ubc31\uc900][Bronze II] \uacf5 \ubc14\uafb8\uae30 - 10813 Time: 0 ms, Memory: 13208 KB "}, "series_id": null, "tags": ["\uc54c\uace0\ub9ac\uc998 \ubb38\uc81c\ud480\uc774", "\ubc31\uc900"], "thumbnail": null, "title": "[\ubc31\uc900][Bronze II] \uacf5 \ubc14\uafb8\uae30 - 10813", "token": null, "url_slug": "\ubc31\uc900--Bronze-II--\uacf5-\ubc14\uafb8\uae30---10813"}}